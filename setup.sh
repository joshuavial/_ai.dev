#!/bin/bash

# Setup script for _ai.dev directory
# This script:
# 1. Creates a .wt.conf file in the parent directory
# 2. Updates .gitignore to exclude _ai.dev and .wt.conf
# 3. Sets up Claude Code sub-agents for the project

set -e  # Exit on error

# Get the script directory and parent directory
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
PARENT_DIR="$(dirname "$SCRIPT_DIR")"

echo "Setting up _ai.dev configuration..."

# Track if any changes were made
CHANGES_MADE=false

# Create .wt.conf file in parent directory
echo "Checking .wt.conf file..."
if [ -f "$PARENT_DIR/.wt.conf" ]; then
    echo "✓ .wt.conf already exists in parent directory"
else
    echo "Creating .wt.conf file in parent directory..."
    cat > "$PARENT_DIR/.wt.conf" << 'EOF'
# Work tracker configuration
# Auto-generated by _ai.dev/setup.sh
EOF
    echo "✓ .wt.conf created"
    CHANGES_MADE=true
fi

# Update .gitignore
GITIGNORE="$PARENT_DIR/.gitignore"

# Function to add entry to .gitignore if not already present
add_to_gitignore() {
    local entry="$1"
    if [ -f "$GITIGNORE" ]; then
        if ! grep -q "^${entry}$" "$GITIGNORE"; then
            echo "$entry" >> "$GITIGNORE"
            echo "  ✓ Added $entry to .gitignore"
            CHANGES_MADE=true
        else
            echo "  ✓ $entry already in .gitignore"
        fi
    else
        echo "$entry" > "$GITIGNORE"
        echo "  ✓ Created .gitignore and added $entry"
        CHANGES_MADE=true
    fi
}

echo -e "\nChecking .gitignore entries..."
add_to_gitignore "_ai.dev"
add_to_gitignore ".wt.conf"

# Setup Claude Code sub-agents
echo -e "\n========================================="
echo "Claude Code Sub-Agent Setup"
echo "========================================="

# Check if .claude directory exists
CLAUDE_DIR="$PARENT_DIR/.claude"
AGENTS_SOURCE="$SCRIPT_DIR/agents"
COMMANDS_SOURCE="$SCRIPT_DIR/commands"

# Also setup in _ai.dev directory for management mode
AI_BWS_CLAUDE_DIR="$SCRIPT_DIR/.claude"

echo -e "\nSetting up Claude Code sub-agents..."

# Function to setup agents (always symlink)
setup_agents() {
    # Check if agents already exist
    if [ -e "$CLAUDE_DIR/agents" ]; then
        if [ -L "$CLAUDE_DIR/agents" ] && [ "$(readlink "$CLAUDE_DIR/agents")" = "$AGENTS_SOURCE" ]; then
            echo "  ✓ .claude/agents already symlinked to _ai.dev/agents"
        else
            echo "  ⚠️  .claude/agents exists - replacing with symlink"
            rm -rf "$CLAUDE_DIR/agents"
            ln -s "$AGENTS_SOURCE" "$CLAUDE_DIR/agents"
            echo "  ✓ Replaced with symlink to _ai.dev/agents"
            CHANGES_MADE=true
        fi
    else
        # Create .claude directory if needed
        if [ ! -d "$CLAUDE_DIR" ]; then
            mkdir -p "$CLAUDE_DIR"
            echo "  ✓ Created .claude directory"
        fi
        
        ln -s "$AGENTS_SOURCE" "$CLAUDE_DIR/agents"
        echo "  ✓ Created symlink to _ai.dev/agents"
        CHANGES_MADE=true
    fi
}

# Function to setup commands (always symlink)
setup_commands() {
    # Check if commands already exist
    if [ -e "$CLAUDE_DIR/commands" ]; then
        if [ -L "$CLAUDE_DIR/commands" ] && [ "$(readlink "$CLAUDE_DIR/commands")" = "$COMMANDS_SOURCE" ]; then
            echo "  ✓ .claude/commands already symlinked to _ai.dev/commands"
        else
            echo "  ⚠️  .claude/commands exists - replacing with symlink"
            rm -rf "$CLAUDE_DIR/commands"
            ln -s "$COMMANDS_SOURCE" "$CLAUDE_DIR/commands"
            echo "  ✓ Replaced with symlink to _ai.dev/commands"
            CHANGES_MADE=true
        fi
    else
        # Create .claude directory if needed
        if [ ! -d "$CLAUDE_DIR" ]; then
            mkdir -p "$CLAUDE_DIR"
            echo "  ✓ Created .claude directory"
        fi
        
        ln -s "$COMMANDS_SOURCE" "$CLAUDE_DIR/commands"
        echo "  ✓ Created symlink to _ai.dev/commands"
        CHANGES_MADE=true
    fi
}

# Run setup functions for parent directory
setup_agents
echo ""
setup_commands

# Also setup in _ai.dev directory for management mode
echo -e "\nSetting up agents in _ai.dev directory for management mode..."

# Setup agents in _ai.dev/.claude
if [ -e "$AI_BWS_CLAUDE_DIR/agents" ]; then
    if [ -L "$AI_BWS_CLAUDE_DIR/agents" ] && [ "$(readlink "$AI_BWS_CLAUDE_DIR/agents")" = "$AGENTS_SOURCE" ]; then
        echo "  ✓ _ai.dev/.claude/agents already symlinked"
    else
        echo "  ⚠️  _ai.dev/.claude/agents already exists (non-standard); leaving in place"
    fi
else
    # Create .claude directory if needed
    if [ ! -d "$AI_BWS_CLAUDE_DIR" ]; then
        mkdir -p "$AI_BWS_CLAUDE_DIR"
        echo "  ✓ Created _ai.dev/.claude directory"
    fi
    
    if ln -s "$AGENTS_SOURCE" "$AI_BWS_CLAUDE_DIR/agents" 2>/dev/null; then
        echo "  ✓ Created symlink in _ai.dev/.claude/agents"
        CHANGES_MADE=true
    else
        echo "  ⚠️  Could not create symlink for _ai.dev/.claude/agents (already exists)"
    fi
fi

# Setup commands in _ai.dev/.claude
if [ -e "$AI_BWS_CLAUDE_DIR/commands" ]; then
    if [ -L "$AI_BWS_CLAUDE_DIR/commands" ] && [ "$(readlink "$AI_BWS_CLAUDE_DIR/commands")" = "$COMMANDS_SOURCE" ]; then
        echo "  ✓ _ai.dev/.claude/commands already symlinked"
    else
        echo "  ⚠️  _ai.dev/.claude/commands already exists (non-standard); leaving in place"
    fi
else
    # Create .claude directory if needed
    if [ ! -d "$AI_BWS_CLAUDE_DIR" ]; then
        mkdir -p "$AI_BWS_CLAUDE_DIR"
        echo "  ✓ Created _ai.dev/.claude directory"
    fi
    
    if ln -s "$COMMANDS_SOURCE" "$AI_BWS_CLAUDE_DIR/commands" 2>/dev/null; then
        echo "  ✓ Created symlink in _ai.dev/.claude/commands"
        CHANGES_MADE=true
    else
        echo "  ⚠️  Could not create symlink for _ai.dev/.claude/commands (already exists)"
    fi
fi

# Add _ai.dev/.claude to .gitignore
add_to_gitignore "_ai.dev/.claude"

# Since we always use symlinks now, no need to add .claude to parent .gitignore

# Detect available AI CLIs (Codex, Gemini, Claude) and prepare adapter docs
echo -e "\nDetecting available AI CLI adapters..."

CLI_ORDER="codex gemini claude"

cli_name() {
    case "$1" in
        codex) echo "Codex" ;;
        gemini) echo "Gemini" ;;
        claude) echo "Claude" ;;
        *) echo "$1" ;;
    esac
}

cli_doc() {
    case "$1" in
        codex) echo "AGENTS.md" ;;
        gemini) echo "GEMINI.md" ;;
        claude) echo "CLAUDE.md" ;;
        *) echo "README.md" ;;
    esac
}

create_adapter_doc() {
    local cli_key="$1"
    local title="$(cli_name "$cli_key")"
    local doc_name="$(cli_doc "$cli_key")"
    local doc_path="$PARENT_DIR/$doc_name"

    if [ -f "$doc_path" ]; then
        echo "  ✓ $doc_name already present"
        return
    fi

    {
        printf '# %s CLI Setup\n\n' "$title"
        printf 'This repository uses the provider-agnostic `_ai.dev` workflow system. When working through the %s CLI:\n\n' "$title"
        printf '1. Read File: `_ai.dev/protocols/boot.md` to load the core instructions.\n'
        printf '2. Read File: `_ai.dev/protocols/setup.md` to bootstrap the repository-specific configuration.\n'
        printf '3. Read workflow files as needed (for example, `_ai.dev/workflows/planning.md`, `_ai.dev/workflows/management.md`, `_ai.dev/workflows/research.md`).\n\n'
        printf 'If the setup script just ran, it may also have dispatched a setup prompt to the %s CLI automatically.\n\n' "$title"
        printf 'Refer to `_ai.dev/core-instructions.md` and `_ai.dev/workflows/` for complete guidance.\n'
    } > "$doc_path"

    echo "  ✓ Created $doc_name with $title onboarding notes"
    CHANGES_MADE=true
}

PRIMARY_CLI=""
AVAILABLE_CLIS=()

for cli in $CLI_ORDER; do
    if command -v "$cli" >/dev/null 2>&1; then
        echo "  ✓ Detected $(cli_name "$cli") CLI ($cli)"
        create_adapter_doc "$cli"
        if [ -z "$PRIMARY_CLI" ]; then
            PRIMARY_CLI="$cli"
        fi
        AVAILABLE_CLIS+=("$cli")
    else
        echo "  - $(cli_name "$cli") CLI not detected"
    fi
done

SETUP_PROMPT="setup the _ai folder"

if [ ${#AVAILABLE_CLIS[@]} -gt 0 ]; then
    echo -e "\nManual follow-up required: run one of the following commands in your preferred CLI to finish setup:\n"
    for cli in "${AVAILABLE_CLIS[@]}"; do
        case "$cli" in
            codex)
                echo "  codex \"$SETUP_PROMPT\""
                ;;
            gemini)
                echo "  gemini -p \"$SETUP_PROMPT\""
                ;;
            claude)
                echo "  claude \"$SETUP_PROMPT\""
                ;;
            *)
                echo "  $cli \"$SETUP_PROMPT\""
                ;;
        esac
    done
else
    echo "  ⚠️  No supported AI CLI detected (Codex, Gemini, Claude)."
fi

# Final status
echo -e "\n========================================="
if [ "$CHANGES_MADE" = true ]; then
    echo "Setup complete! Changes were made."
    echo ""
    echo "Claude Code sub-agents are now available!"
    echo "Use these slash commands in Claude Code:"
    echo "  /plan    - Planning orchestrator"
    echo "  /execute - Execution orchestrator"
    echo "  /qa      - QA orchestrator"
    echo "  /manage  - Management orchestrator"
    echo "  /test    - Manual testing agent"
else
    echo "Setup complete! Everything was already configured correctly."
fi
echo "========================================="
